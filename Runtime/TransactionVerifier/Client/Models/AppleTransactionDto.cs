//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using UnityEngine.Purchasing.TransactionVerifier.Http;



namespace UnityEngine.Purchasing.TransactionVerifier.Models
{
    /// <summary>
    /// Object representing an Apple App Store transaction
    /// </summary>
    [Preserve]
    [DataContract(Name = "apple-transaction-dto")]
    internal class AppleTransactionDto
    {
        /// <summary>
        /// Object representing an Apple App Store transaction
        /// </summary>
        /// <param name="hash">Hash of the transaction. Should be unique.</param>
        /// <param name="playerId">ID of the player.</param>
        /// <param name="projectId">ID of the Unity project.</param>
        /// <param name="fulfilled">Whether the transaction has been marked as fulfilled.</param>
        /// <param name="fulfilledAt">Date time in ISO 8601 format. &#x60;null&#x60; if there is no associated value.</param>
        /// <param name="transactionId">ID of the order/transaction/receipt from a Google Play Store receipt.</param>
        /// <param name="productId">ID of the product.</param>
        /// <param name="quantity">Quantity of the product.</param>
        /// <param name="transactionType">Type of the transaction.</param>
        /// <param name="validatedAt">Date time in ISO 8601 format.</param>
        /// <param name="updatedAt">Date time in ISO 8601 format.</param>
        /// <param name="revokedAt">Date time in ISO 8601 format. Null if the transaction is not revoked.</param>
        [Preserve]
        public AppleTransactionDto(string hash = default, string playerId = default, string projectId = default, bool fulfilled = default, DateTime? fulfilledAt = default, string transactionId = default, string productId = default, int? quantity = default, string transactionType = default, DateTime validatedAt = default, DateTime updatedAt = default, DateTime? revokedAt = default)
        {
            Hash = hash;
            PlayerId = playerId;
            ProjectId = projectId;
            Fulfilled = fulfilled;
            FulfilledAt = fulfilledAt;
            TransactionId = transactionId;
            ProductId = productId;
            Quantity = quantity;
            TransactionType = transactionType;
            ValidatedAt = validatedAt;
            UpdatedAt = updatedAt;
            RevokedAt = revokedAt;
        }

        /// <summary>
        /// Hash of the transaction. Should be unique.
        /// </summary>
        [Preserve]
        [DataMember(Name = "hash", EmitDefaultValue = false)]
        public string Hash{ get; }

        /// <summary>
        /// ID of the player.
        /// </summary>
        [Preserve]
        [DataMember(Name = "player_id", EmitDefaultValue = false)]
        public string PlayerId{ get; }

        /// <summary>
        /// ID of the Unity project.
        /// </summary>
        [Preserve]
        [DataMember(Name = "project_id", EmitDefaultValue = false)]
        public string ProjectId{ get; }

        /// <summary>
        /// Whether the transaction has been marked as fulfilled.
        /// </summary>
        [Preserve]
        [DataMember(Name = "fulfilled", EmitDefaultValue = true)]
        public bool Fulfilled{ get; }

        /// <summary>
        /// Date time in ISO 8601 format. &#x60;null&#x60; if there is no associated value.
        /// </summary>
        [Preserve]
        [DataMember(Name = "fulfilled_at", EmitDefaultValue = false)]
        public DateTime? FulfilledAt{ get; }

        /// <summary>
        /// ID of the order/transaction/receipt from a Google Play Store receipt.
        /// </summary>
        [Preserve]
        [DataMember(Name = "transaction_id", EmitDefaultValue = false)]
        public string TransactionId{ get; }

        /// <summary>
        /// ID of the product.
        /// </summary>
        [Preserve]
        [DataMember(Name = "product_id", EmitDefaultValue = false)]
        public string ProductId{ get; }

        /// <summary>
        /// Quantity of the product.
        /// </summary>
        [Preserve]
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int? Quantity{ get; }

        /// <summary>
        /// Type of the transaction.
        /// </summary>
        [Preserve]
        [DataMember(Name = "transaction_type", EmitDefaultValue = false)]
        public string TransactionType{ get; }

        /// <summary>
        /// Date time in ISO 8601 format.
        /// </summary>
        [Preserve]
        [DataMember(Name = "validated_at", EmitDefaultValue = false)]
        public DateTime ValidatedAt{ get; }

        /// <summary>
        /// Date time in ISO 8601 format.
        /// </summary>
        [Preserve]
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt{ get; }

        /// <summary>
        /// Date time in ISO 8601 format. Null if the transaction is not revoked.
        /// </summary>
        [Preserve]
        [DataMember(Name = "revoked_at", EmitDefaultValue = false)]
        public DateTime? RevokedAt{ get; }

        /// <summary>
        /// Formats a AppleTransactionDto into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Hash != null)
            {
                serializedModel += "hash," + Hash + ",";
            }
            if (PlayerId != null)
            {
                serializedModel += "player_id," + PlayerId + ",";
            }
            if (ProjectId != null)
            {
                serializedModel += "project_id," + ProjectId + ",";
            }
            serializedModel += "fulfilled," + Fulfilled.ToString() + ",";
            if (FulfilledAt != null)
            {
                serializedModel += "fulfilled_at," + FulfilledAt.ToString() + ",";
            }
            if (TransactionId != null)
            {
                serializedModel += "transaction_id," + TransactionId + ",";
            }
            if (ProductId != null)
            {
                serializedModel += "product_id," + ProductId + ",";
            }
            if (Quantity != null)
            {
                serializedModel += "quantity," + Quantity.ToString() + ",";
            }
            if (TransactionType != null)
            {
                serializedModel += "transaction_type," + TransactionType + ",";
            }
            if (ValidatedAt != null)
            {
                serializedModel += "validated_at," + ValidatedAt.ToString() + ",";
            }
            if (UpdatedAt != null)
            {
                serializedModel += "updated_at," + UpdatedAt.ToString() + ",";
            }
            if (RevokedAt != null)
            {
                serializedModel += "revoked_at," + RevokedAt.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a AppleTransactionDto as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Hash != null)
            {
                var hashStringValue = Hash.ToString();
                dictionary.Add("hash", hashStringValue);
            }

            if (PlayerId != null)
            {
                var player_idStringValue = PlayerId.ToString();
                dictionary.Add("player_id", player_idStringValue);
            }

            if (ProjectId != null)
            {
                var project_idStringValue = ProjectId.ToString();
                dictionary.Add("project_id", project_idStringValue);
            }

            var fulfilledStringValue = Fulfilled.ToString();
            dictionary.Add("fulfilled", fulfilledStringValue);

            if (FulfilledAt != null)
            {
                var fulfilled_atStringValue = FulfilledAt.ToString();
                dictionary.Add("fulfilled_at", fulfilled_atStringValue);
            }

            if (TransactionId != null)
            {
                var transaction_idStringValue = TransactionId.ToString();
                dictionary.Add("transaction_id", transaction_idStringValue);
            }

            if (ProductId != null)
            {
                var product_idStringValue = ProductId.ToString();
                dictionary.Add("product_id", product_idStringValue);
            }

            if (Quantity != null)
            {
                var quantityStringValue = Quantity.ToString();
                dictionary.Add("quantity", quantityStringValue);
            }

            if (TransactionType != null)
            {
                var transaction_typeStringValue = TransactionType.ToString();
                dictionary.Add("transaction_type", transaction_typeStringValue);
            }

            if (ValidatedAt != null)
            {
                var validated_atStringValue = ValidatedAt.ToString();
                dictionary.Add("validated_at", validated_atStringValue);
            }

            if (UpdatedAt != null)
            {
                var updated_atStringValue = UpdatedAt.ToString();
                dictionary.Add("updated_at", updated_atStringValue);
            }

            if (RevokedAt != null)
            {
                var revoked_atStringValue = RevokedAt.ToString();
                dictionary.Add("revoked_at", revoked_atStringValue);
            }

            return dictionary;
        }
    }
}
