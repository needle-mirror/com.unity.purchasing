{
  "name": "com.unity.purchasing",
  "displayName": "In-App Purchasing",
  "unity": "2021.3",
  "_upm": {
    "gameService": {
      "groupIndex": 4,
      "groupName": "Monetize",
      "configurePath": "Project/Services/In-App Purchasing",
      "genericDashboardUrl": "https://dashboard.unity3d.com/",
      "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/analytics/v2/dashboards/revenue",
      "projectDashboardUrlType": "OrganizationKeyAndProjectGuid"
    },
    "supportedPlatforms": [
      "Android",
      "iOS"
    ],
    "changelog": "### Changed\n- Updated `com.unity.services.core` dependency to 1.14.0\n\n### Fixed\n- Coded IAP backwards compatibility fixes:\n  - `ProcessPurchase` will be invoked for restored purchases on their first encounter. This brings back the behaviour from IAP 4.13.0.\n  - Apple - Fixed `Product.hasReceipt` and `Product.receipt` falsely returning a receipt for products that were not purchased."
  },
  "version": "5.0.1",
  "description": "Unity In-App Purchasing (IAP) allows you to sell digital content within your application. This package provides a unified API for handling in-app purchases across multiple platforms, including the Apple App Store and Google Play Store. Unity IAP simplifies implementing and managing purchases for different stores.\n\nFeatures:\n\n ▪ A single API to access all supported stores, making it easier to manage your in-game economy.\n ▪ Automatic integration with Unity Analytics for monitoring revenue and purchase data across platforms.\n ▪ Supports iOS, Mac, tvOS, and Google Play.\n ▪ Client-side receipt validation for Apple Store and Google Play.\n\nTo enable In-App Purchasing, install the package and open the Services window (Window > General > Services).\n\nUpgrade notes:\nThis release is a major update to the IAP package. Review the included sample for a complete example of how to use the new version. Upgrading is recommended to take advantage of the latest improvements and features.",
  "dependencies": {
    "com.unity.ugui": "1.0.0",
    "com.unity.modules.unitywebrequest": "1.0.0",
    "com.unity.modules.jsonserialize": "1.0.0",
    "com.unity.modules.androidjni": "1.0.0",
    "com.unity.services.core": "1.14.0"
  },
  "keywords": [
    "purchasing",
    "iap",
    "unity"
  ],
  "license": "Unity Companion Package License v1.0",
  "hideInEditor": false,
  "relatedPackages": {
    "com.unity.purchasing.tests": "5.0.1"
  },
  "upmCi": {
    "footprint": "6bf4b9f88459c735793c1ea69a31b2b9059cd139"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.purchasing@5.0/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/com.unity.purchasing.git",
    "type": "git",
    "revision": "4fc0a84d51bc571dde90b12d948ab9a5e5b8f2b3"
  },
  "samples": [
    {
      "displayName": "01 Buying Consumables",
      "description": "This sample showcases the basics of how to initialize in-app purchases and handle a simple consumable purchase.",
      "path": "Samples~/01 BuyingConsumables"
    },
    {
      "displayName": "02 Buying Subscription",
      "description": "This sample demonstrates the basics of handling subscription purchases using the entitlement system to check and manage subscription status.",
      "path": "Samples~/02 BuyingSubscription"
    },
    {
      "displayName": "03 Fetching Additional Products",
      "description": "Demonstrates how to dynamically fetch and display additional in-app products using the Store Controller in Unity IAP. Includes best practices for event subscription management.",
      "path": "Samples~/03 FetchingAdditionalProducts"
    },
    {
      "displayName": "04 Integrating Self-Provided Backend Receipt Validation",
      "description": "This sample showcases how to integrate your own backend validation with Unity IAP.",
      "path": "Samples~/04 IntegratingSelfProvidedBackendReceiptValidation"
    },
    {
      "displayName": "06 Initialize Unity Gaming Services",
      "description": "This sample showcases how to initialize Unity Gaming Services using the Services Core API",
      "path": "Samples~/06 InitializeGamingServices"
    },
    {
      "displayName": "07 Catalog Provider",
      "description": "Demonstrates how to declare in-app products using a CatalogProvider in Unity IAP. Shows how to generate and use a product catalog JSON file.",
      "path": "Samples~/07 Catalog Provider"
    },
    {
      "displayName": "Apple App Store - 01 Refreshing App Receipts",
      "description": "This sample shows how to refresh Apple App Store receipts.",
      "path": "Samples~/Apple App Store - 01 RefreshingAppReceipt"
    },
    {
      "displayName": "Apple App Store - 02 Handling Deferred Purchases",
      "description": "This sample showcases how to handle deferred purchases using Apple extensions and configurations.",
      "path": "Samples~/Apple App Store - 02 HandlingDeferredPurchases"
    },
    {
      "displayName": "Apple App Store - 03 Retrieving Product Receipt",
      "description": "This sample showcases how to retrieve product transaction receipts for Ask to Buy purchases.",
      "path": "Samples~/Apple App Store - 03 RetrievingJWSRepresentation"
    },
    {
      "displayName": "Apple App Store - 04 Fraud Detection",
      "description": "This sample showcases how to provide to the Apple App Store your user's identifiers to help prevent fraud.",
      "path": "Samples~/Apple App Store - 04 FraudDetection"
    },
    {
      "displayName": "Apple App Store - 05 Getting Introductory Subscription Prices",
      "description": "This sample showcases how to use Apple extensions to get introductory subscription offer information.",
      "path": "Samples~/Apple App Store - 05 GettingIntroductoryPrices"
    },
    {
      "displayName": "Coded IAP 5.0.0 Sample",
      "description": "This sample showcases how to use Coded IAP in 5.0.0. ",
      "path": "Samples~/Coded IAP 5.0.0 Sample"
    },
    {
      "displayName": "Google Play Store - 05 Fraud Detection",
      "description": "This sample showcases how to provide to the Google Play Store your user's identifiers to help prevent fraud.",
      "path": "Samples~/Google Play Store - 05 FraudDetection"
    },
    {
      "displayName": "Google Play Store - 06 Local Receipt Validation",
      "description": "This sample showcases how to do local receipt validation with the Google Play Store.",
      "path": "Samples~/Google Play Store - 06 Local Receipt Validation"
    },
    {
      "displayName": "Minimal Coded IAP 5.0.0 Sample",
      "description": "This sample showcases how to do a minimal implementation of Coded IAP in 5.0.0.",
      "path": "Samples~/Minimal Coded IAP 5.0.0 Sample"
    }
  ]
}
